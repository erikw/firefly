# CMAKE
	We should switch to CMake. I have begun on this branch, it can now
	build the Labcomm compiler (and generate the Labcomm files that are
	needed), libfirefly, libtransport-eth-posix, libtransport-udp-posix
	and libevent-queue (which isn't needed but was a good starting point
	since it didn't depend on anything).

	Stuff left to do:
		- Avoid compiling LWIP if it doesn't exist on the compiling
		  computer.
		- Add test_proto_memman to src/test/CMakeLists.txt when it has
		  been fixed (see # TEST STUFF below).
		- Look through the entire Makefile to see if there are targets
		  left to move over to CMake.

	There's probably more stuff I've forgotten but this is a start.

# EVENT CHAINING
	Should implement some sort of chaining of events. This would allow us to
	close channels when a connection is closed, e.g:

	conn_close -> chan_close_ev -> chan_close_ev -> conn_close_ev

    This would save us from relying on event priority to synchronize the
    order of execution of events.

	HOWTO:
	Every event has an id. When adding an event, specify the id of each event
	it depends on. When executing an event, iterate through each dependency,
	find the referenced event and if it is not yet executed, execute it.

# HALF OPEN CONNECTION
    Impl. half open on connections, can send but not receive on a half
    open.  When closing a connection, it should be set to HALF_OPEN to
    disallow receiving new stuff on it while allowing channel close
    packets to be sent.

    Possibly also implement an ERROR state on the connection.

# TEST STUFF
	- The eth_posix test suite fails infrequently on a ubu10.04 32b vm
      with incorrect sender etc. Not reproducible on ubu12.04 64b.

	- Try limiting the pingpong suite to first open channel and then
	  continue.

	- Fix test_proto_memman, it currently doesn't even compile.

# Better Build system
	- CMake in the works!

# Seperate LabComm, RTOS\LWIP, Firefly from eachother.
	- Firefly should not include LabComm but rather depend on it. Path to
	  headers and libs should be configurable (through cmake?)
